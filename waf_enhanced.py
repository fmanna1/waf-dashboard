
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute
import base64
import ipaddress

def extract_public_ip(ip_str):
    """Extracts first public IP from a comma-separated list."""
    for ip in ip_str.split(","):
        ip = ip.strip()
        try:
            ip_obj = ipaddress.ip_address(ip)
            if not ip_obj.is_private:
                return ip
        except ValueError:
            continue
    return ip_str.split(",")[0].strip()  # fallback

def encode_payload(payload):
    """Base64 encode payload for safe logging."""
    return base64.b64encode(payload.encode()).decode()

def compute_threat_score(payload):
    """Assign a basic threat score based on pattern matches."""
    indicators = ['<script>', 'onerror=', 'fetch(', 'select ', 'union', 'drop table']
    score = sum(1 for i in indicators if i in payload.lower())
    return min(score * 2, 10)


("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


#
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


M
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


K
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


M
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


V
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


#
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


|
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


|
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


K
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


|
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


|
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


|
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


*
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


?
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


K
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


#
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


+
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


4
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


4
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


K
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


!
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


2
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


4
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


2
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


🧪
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


2
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


z
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


6
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


U
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


2
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


<
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


#
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


/
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


B
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


E
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


M
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


✅
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


5
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


⚠
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


️
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


3
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


🛡
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


️
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


>
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


5
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


🔒
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


\
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


H
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


🛡
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


️
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


W
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


5
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


Q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


L
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


j
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


X
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


C
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


S
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


G
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


D
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


z
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


1
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


'
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


@
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


-
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


I
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


b
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


[
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


{
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


w
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


]
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


}
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


✅
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


N
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


x
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


l
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


A
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


k
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


F
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


q
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


y
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


c
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


d
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


f
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


m
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


_
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


:
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


v
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


i
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


g
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


e
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


P
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


O
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


R
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


T
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


5
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


a
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


u
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


n
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


(
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


h
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


s
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


.
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


0
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


"
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


,
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


 
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


=
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


p
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


o
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


r
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


t
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


)
def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )




def log_attack(level, attack_type, ip, payload):
    normalized_ip = extract_public_ip(ip)
    encoded_payload = encode_payload(payload)
    threat_score = compute_threat_score(payload)

    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            INSERT INTO logs (timestamp, level, attack_type, ip, payload)
            VALUES (?, ?, ?, ?, ?)""",
            (datetime.utcnow().isoformat(), f"{level} (score={threat_score})", attack_type, normalized_ip, encoded_payload)
        )


